//--------------------------------
//------- Code de base -----------
//--------------------------------
global curentWeaponCost = 0;
global WEAPON_MAX_SCOPE = 8;

global MIN_FLOOR_TO_USE_BANDAGE = 100;

global myDirectWeapons = [WEAPON_LASER, WEAPON_SHOTGUN];
global myCircularWeapons = [WEAPON_MAGNUM];

global attacChips = [CHIP_FLAME, CHIP_FLASH, CHIP_ICE, CHIP_SPARK];
global bandageChips = [CHIP_CURE, CHIP_BANDAGE];

global MODE_DEF = 1;
global MODE_ATT = 2;

global mode = MODE_DEF;

var myLeek = getLeek();
var enemy = getNearestEnemy();

chooseMode();

if (mode == MODE_DEF) {
    defaultWeapon();
}

useBandage(myLeek, MIN_FLOOR_TO_USE_BANDAGE, true);
putHelmet(myLeek);
useRenforcementChip(myLeek);

if (mode == MODE_DEF) {
    move(myLeek, enemy);
    chooseAdaptedWeapon(myLeek, enemy);
}
else if (mode == MODE_ATT) {
    equipeMostPowerFullWeapon(myLeek);
    moveToUseMostPowerFullWeapon(enemy);
}

shoot(myLeek, enemy);

useAttacChips(myLeek, enemy);
retreat(myLeek, enemy);
useBandage(myLeek, 10000, false);

function chooseMode() {
    var nbTurnsToEnd = MAX_TURNS - getTurn();
    if (nbTurnsToEnd < 10 || getLife() < 200 || getFightContext() == FIGHT_CONTEXT_TOURNAMENT) {
        mode = MODE_ATT;
        debug('switch to att mode');
    }
}

function defaultWeapon() {
    if (getWeapon() == null) {
        equipWeapon(WEAPON_MAGNUM);
    }
}

function useBandage(myLeek, minFloor, useOnlyOne) {
    if (getLife(myLeek) < minFloor) {
        for (var bandageChip in bandageChips) {
            var nbChipUse = floor(getTP(myLeek) / getChipCost(bandageChip));
            if (canUseChip(bandageChip, myLeek)) {
                debug('nbChipUse: ' + nbChipUse);
                for (var i = 1; i <= nbChipUse; i++) {
                    useChip(bandageChip, myLeek);
                    debug('useBandageChip' + getChipName(bandageChip));
                    if (useOnlyOne) {
                        return;
                    }
                }
            }
        }
    }
}

function putHelmet(myLeek) {
    useChip(CHIP_HELMET, myLeek);
}

function useRenforcementChip(myLeek) {
    if (getTurn() % 3 == 0) {
        useChip(CHIP_STEROID, myLeek);
    }
}

function chooseAdaptedWeapon(myLeek, enemy) {

    for (var directWeapon in myDirectWeapons) {
        if (canUseDirectWeapon(myLeek, enemy, directWeapon)) {
            equipWeapon(directWeapon);
            return;
        }
    }

    for (var circularWeapon in myCircularWeapons) {
        if (canUseCircleWeapon(myLeek, enemy, circularWeapon)) {
            equipWeapon(circularWeapon);
            return;
        }
    }
}

function equipeMostPowerFullWeapon(myLeek) {
    equipWeapon(WEAPON_LASER);
}

function canUseDirectWeapon(myLeek, enemy, weapon) {
    var enemyCell = getCell(enemy);
    var myLeekCell = getCell(myLeek);

    var xDiff = abs(getCellX(enemyCell) - getCellX(myLeekCell));
    var yDiff = abs(getCellY(enemyCell) - getCellY(myLeekCell));

    debug('getCellX(enemyCell): ' + getCellX(enemyCell) + 'getCellY(enemyCell): ' + getCellY(enemyCell));
    debug('getCellX(myLeekCell): ' + getCellX(myLeekCell) + 'getCellY(myLeekCell): ' + getCellY(myLeekCell));
    debug('xDiff: ' + xDiff + ' yDiff:' + yDiff);

    var canUseShotgunResult = false;

    if (xDiff == 0 && yDiff <= getWeaponMaxScope(weapon)) {
        canUseShotgunResult = true;
    }
    if (yDiff == 0 && xDiff <= getWeaponMaxScope(weapon)) {
        canUseShotgunResult = true;
    }

    debug('canUseDirectWeapon: ' + canUseShotgunResult);
    return canUseShotgunResult;
}

function canUseCircleWeapon(myLeek, enemy, weapon) {
    var enemyCell = getCell(enemy);
    var myLeekCell = getCell(myLeek);

    var xDiff = abs(getCellX(enemyCell) - getCellX(myLeekCell));
    var yDiff = abs(getCellY(enemyCell) - getCellY(myLeekCell));

    debug('getCellX(enemyCell): ' + getCellX(enemyCell) + 'getCellY(enemyCell): ' + getCellY(enemyCell));
    debug('getCellX(myLeekCell): ' + getCellX(myLeekCell) + 'getCellY(myLeekCell): ' + getCellY(myLeekCell));
    debug('xDiff: ' + xDiff + ' yDiff:' + yDiff);

    var canUseCircleWeaponResult = false;

    if ((xDiff + yDiff ) <= getWeaponMaxScope(weapon) && (xDiff + yDiff ) >= getWeaponMinScope(weapon)) {
        canUseCircleWeaponResult = true;
    }

    debug('canUseCircleWeapon: ' + getWeaponName(weapon) + '  ' + canUseCircleWeaponResult);
    return canUseCircleWeaponResult;
}

function equipWeapon(weaponId) {
    if (getWeapon() == null || getWeapon() != weaponId ) {
        debug("equipWeapon: " + getWeaponName(weaponId));
        setWeapon(weaponId);
        curentWeaponCost = getWeaponCost(weaponId);
    }
}

function move(myLeek, enemy) {
    var distance = getDistanceBetween(myLeek, enemy);
    var needToMoveToMaxDistance = (distance - WEAPON_MAX_SCOPE);

    debug('needToMoveToMaxDistance' + needToMoveToMaxDistance);

    if (needToMoveToMaxDistance > 0) {
        moveToward(enemy, abs(needToMoveToMaxDistance));
    }
    else if (needToMoveToMaxDistance < 0) {
        moveAwayFrom(enemy, abs(needToMoveToMaxDistance));
    }
}

function moveToUseMostPowerFullWeapon(enemy) {
    moveTowardCell(getCellToUseWeapon(enemy));
}

function retreat(myLeek, enemy) {
    if (getMP(myLeek) > 0 && getLife(myLeek) < 100) {
        moveAwayFrom(enemy);
    }
}

function shoot(myLeek, enemy) {
    if (getWeapon() != null) {
        var nbTir = floor(getTP(myLeek) / curentWeaponCost);
        debug('nbTir: ' + nbTir);
        for (var i = 1; i <= nbTir; i++) {
            useWeapon(enemy);
            debug('useWeapon: ' + getWeaponName(getWeapon()));
        }
    }
}

function useAttacChips(myLeek, enemy) {

    for (var chip in attacChips) {
        var nbChipUse = floor(getTP(myLeek) / getChipCost(chip));
        if (canUseChipOnEnemy(chip, myLeek, enemy)) {
            debug('nbChipUse: ' + nbChipUse);
            for (var i = 1; i <= nbChipUse; i++) {
                useChip(chip, enemy);
                debug('useChip' + getChipName(chip));
            }
        }
    }
}

function canUseChipOnEnemy(chip, myLeek, enemy) {
    var distance = getDistanceBetween(myLeek, enemy);
    var result = getChipMaxScope(chip) >= distance && distance >= getChipMinScope(chip);
    debug('canUseChipOnEnemy ' + getChipName(chip) + ' distance: ' + distance + 'maxScope:' + getChipMaxScope(chip) + ' minScope:' + getChipMinScope(chip) + ' = ' + result);
    return result;
}

function getDistanceBetween(myLeek, enemy) {
    if (getCell(myLeek) == null || getCell(enemy) == null) {
        return null;
    }
    return getCellDistance(getCell(myLeek), getCell(enemy));
}