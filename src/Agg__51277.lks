//--------------------------------
//------- Code de base -----------
//--------------------------------
global cuurentWeaponCost = 0;
global WEAPON_MAX_SCOPE = 8;
global WEAPON_MIN_SCOPE = 1;

//WEAPON_DOUBLE_GUN
global WEAPON_DOUBLE_GUN_MAX_SCOPE = 7;
global WEAPON_DOUBLE_GUN_MIN_SCOPE = 2;

//WEAPON_PISTOL
global WEAPON_PISTOL_MAX_SCOPE = 7;
global WEAPON_PISTOL_MIN_SCOPE = 1;

//WEAPON_SHOTGUN
global WEAPON_SHOTGUN_MAX_SCOPE = 5;
global WEAPON_SHOTGUN_MIN_SCOPE = 1;

//WEAPON_MAGNUM
global WEAPON_MAGNUM_MAX_SCOPE = 8;
global WEAPON_MAGNUM_MIN_SCOPE = 1;

global MIN_FLOOR_TO_USE_BANDAGE = 100;

global myWeapons = [WEAPON_DOUBLE_GUN, WEAPON_PISTOL];
global attacChips = [CHIP_ICE, CHIP_SPARK, CHIP_PEBBLE, CHIP_SHOCK];

var myLeek = getLeek();
var enemy = getNearestEnemy();

defaultWeapon();

useBandage(myLeek, MIN_FLOOR_TO_USE_BANDAGE);
putHelmet(myLeek);
useRenforcementChip(myLeek);

move(myLeek, enemy);

chooseAdaptedWeapon(myLeek, enemy);
shoot(myLeek, enemy);

useAttacChips(myLeek, enemy);
retreat(myLeek, enemy);
useBandage(myLeek, 10000);

function defaultWeapon() {
    if (getWeapon() == null) {
        equipWeapon(WEAPON_MAGNUM);
    }
}

function useBandage(myLeek, minFloor) {
    if (getLife(myLeek) < minFloor) {
        useChip(CHIP_CURE, myLeek);
    }
}

function putHelmet(myLeek) {
    useChip(CHIP_HELMET, myLeek);
}

function useRenforcementChip(myLeek) {
    if(getTurn()%2 == 0) {
        useChip(CHIP_PROTEIN, myLeek);
    }
}

function chooseAdaptedWeapon(myLeek, enemy) {
    if (canUseShotgun(myLeek, enemy)) {
        equipWeapon(WEAPON_SHOTGUN);
    }
    else if (canUseMagnum(myLeek, enemy)) {
        equipWeapon(WEAPON_MAGNUM);
    }
    else if (canUseDoubleGun(myLeek, enemy)) {
        equipWeapon(WEAPON_DOUBLE_GUN);
    }
//    else if (canUsePistol(myLeek, enemy)) {
//        equipWeapon(WEAPON_PISTOL);
//    }
}

function canUseShotgun(myLeek, enemy) {
    var enemyCell = getCell(enemy);
    var myLeekCell = getCell(myLeek);

    var xDiff = abs(getCellX(enemyCell) - getCellX(myLeekCell));
    var yDiff = abs(getCellY(enemyCell) - getCellY(myLeekCell));

    debug('getCellX(enemyCell): ' + getCellX(enemyCell) + 'getCellY(enemyCell): ' + getCellY(enemyCell));
    debug('getCellX(myLeekCell): ' + getCellX(myLeekCell) + 'getCellY(myLeekCell): ' + getCellY(myLeekCell));
    debug('xDiff: ' + xDiff + ' yDiff:' + yDiff);

    var canUseShotgunResult = false;

    if (xDiff == 0 && yDiff <= WEAPON_SHOTGUN_MAX_SCOPE) {
        canUseShotgunResult = true;
    }
    if (yDiff == 0 && xDiff <= WEAPON_SHOTGUN_MAX_SCOPE) {
        canUseShotgunResult = true;
    }

    debug('canUseShotgun: ' + canUseShotgunResult);
    return canUseShotgunResult;
}

function canUseMagnum(myLeek, enemy) {
    var canUseMagnumResult = canUseCircleWeapon(myLeek, enemy, WEAPON_MAGNUM_MAX_SCOPE, WEAPON_MAGNUM_MIN_SCOPE);
    debug('canUseMagnum: ' + canUseMagnumResult);
    return canUseMagnumResult;
}

function canUseDoubleGun(myLeek, enemy) {
    var canUseDoubleGunResult = canUseCircleWeapon(myLeek, enemy, WEAPON_DOUBLE_GUN_MAX_SCOPE, WEAPON_DOUBLE_GUN_MIN_SCOPE);
    debug('canUseDoubleGun: ' + canUseDoubleGunResult);
    return canUseDoubleGunResult;
}

function canUsePistol(myLeek, enemy) {
    var canUsePistolResult = canUseCircleWeapon(myLeek, enemy, WEAPON_PISTOL_MAX_SCOPE, WEAPON_PISTOL_MIN_SCOPE);
    debug('canUsePistol: ' + canUsePistolResult);
    return canUsePistolResult;
}

function canUseCircleWeapon(myLeek, enemy, maxScope, minScope) {
    var enemyCell = getCell(enemy);
    var myLeekCell = getCell(myLeek);

    var xDiff = abs(getCellX(enemyCell) - getCellX(myLeekCell));
    var yDiff = abs(getCellY(enemyCell) - getCellY(myLeekCell));

    debug('getCellX(enemyCell): ' + getCellX(enemyCell) + 'getCellY(enemyCell): ' + getCellY(enemyCell));
    debug('getCellX(myLeekCell): ' + getCellX(myLeekCell) + 'getCellY(myLeekCell): ' + getCellY(myLeekCell));
    debug('xDiff: ' + xDiff + ' yDiff:' + yDiff);

    var canUseCircleWeaponResult = false;

    if ((xDiff + yDiff ) <= maxScope && (xDiff + yDiff ) >= minScope) {
        canUseCircleWeaponResult = true;
    }

    return canUseCircleWeaponResult;
}

function equipWeapon(weaponId) {
    if (getWeapon() == null || getWeapon() != weaponId ) {
        debug("equipWeapon: " + getWeaponName(weaponId));
        setWeapon(weaponId);
        cuurentWeaponCost = getWeaponCost(weaponId);
    }
}

function move(myLeek, enemy) {
    var distance = getDistanceBetween(myLeek, enemy);
    var needToMoveToMaxDistance = (distance - WEAPON_MAX_SCOPE);

    debug('needToMoveToMaxDistance' + needToMoveToMaxDistance);

    if (needToMoveToMaxDistance > 0) {
        moveToward(enemy, abs(needToMoveToMaxDistance));
    }
    else if (needToMoveToMaxDistance < 0) {
        moveAwayFrom(enemy, abs(needToMoveToMaxDistance));
    }
}

function retreat(myLeek, enemy) {
    if (getMP(myLeek) > 0 && getLife(myLeek) < 100) {
        moveAwayFrom(enemy);
    }
}

function shoot(myLeek, enemy) {
    if (getWeapon() != null) {
        var nbTir = floor(getTP(myLeek) / cuurentWeaponCost);
        debug('nbTir: ' + nbTir);
        for (var i = 1; i <= nbTir; i++) {
            useWeapon(enemy);
            debug('useWeapon: ' + getWeaponName(getWeapon()));
        }
    }
}

function useAttacChips(myLeek, enemy) {

    for (var chip in attacChips) {
        var nbChipUse = floor(getTP(myLeek) / getChipCost(chip));
        if (canUseChipOnEnemy(chip, myLeek, enemy)) {
            debug('nbChipUse: ' + nbChipUse);
            for (var i = 1; i <= nbChipUse; i++) {
                useChip(chip, enemy);
                debug('useChip' + getChipName(chip));
            }
        }
    }
}

function canUseChipOnEnemy(chip, myLeek, enemy) {
    var distance = getDistanceBetween(myLeek, enemy);
    var result = getChipMaxScope(chip) >= distance && distance >= getChipMinScope(chip);
    debug('canUseChipOnEnemy ' + getChipName(chip) + ' distance: ' + distance + 'maxScope:' + getChipMaxScope(chip) + ' minScope:' + getChipMinScope(chip) + ' = ' + result);
    return result;
}

function getDistanceBetween(myLeek, enemy) {
    if (getCell(myLeek) == null || getCell(enemy) == null) {
        return null;
    }
    return getCellDistance(getCell(myLeek), getCell(enemy));
}