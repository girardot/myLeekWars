// This file was automatically generated by IDEALeek, it is not intended to be edited.

/**
 * Pistolet. Arme légère et maniable
 */
global WEAPON_PISTOL;

/**
 * Mitrailleuse. 
 */
global WEAPON_MACHINE_GUN;

/**
 * Double gun. 
 */
global WEAPON_DOUBLE_GUN;

/**
 * Fusil à pompe. 
 */
global WEAPON_SHOTGUN;

/**
 * Magnum. 
 */
global WEAPON_MAGNUM;

/**
 * Laser. 
 */
global WEAPON_LASER;

/**
 * Lance-grenades. 
 */
global WEAPON_GRENADE_LAUNCHER;

/**
 * Lance-flammes. 
 */
global WEAPON_FLAME_THROWER;

/**
 * Destroyer. 
 */
global WEAPON_DESTROYER;

/**
 * Gazeur. 
 */
global WEAPON_GAZOR;

/**
 * Électriseur. 
 */
global WEAPON_ELECTRISOR;

/**
 * M-Laser. Arme lourde qui provoque des dégats monstrueux en ligne
 */
global WEAPON_M_LASER;

/**
 * Décharge. Lance une faible décharge
 */
global CHIP_SHOCK;

/**
 * Caillou. 
 */
global CHIP_PEBBLE;

/**
 * Étincelle. 
 */
global CHIP_SPARK;

/**
 * Glaçon. 
 */
global CHIP_ICE;

/**
 * Bandage. 
 */
global CHIP_BANDAGE;

/**
 * Casque. 
 */
global CHIP_HELMET;

/**
 * Rocher. 
 */
global CHIP_ROCK;

/**
 * Étirement. 
 */
global CHIP_STRETCHING;

/**
 * Mur. 
 */
global CHIP_WALL;

/**
 * Protéines. 
 */
global CHIP_PROTEIN;

/**
 * Bouclier. 
 */
global CHIP_SHIELD;

/**
 * Guérison. 
 */
global CHIP_CURE;

/**
 * Motivation. 
 */
global CHIP_MOTIVATION;

/**
 * Éclair. 
 */
global CHIP_FLASH;

/**
 * Bottes de cuir. 
 */
global CHIP_LEATHER_BOOTS;

/**
 * Flamme. 
 */
global CHIP_FLAME;

/**
 * Stéroides. 
 */
global CHIP_STEROID;

/**
 * Rempart. 
 */
global CHIP_RAMPART;

/**
 * Perfusion. 
 */
global CHIP_DRIP;

/**
 * Échauffement. 
 */
global CHIP_WARM_UP;

/**
 * Stalactite. 
 */
global CHIP_STALACTITE;

/**
 * Armure. 
 */
global CHIP_ARMOR;

/**
 * Bottes ailées. 
 */
global CHIP_WINGED_BOOTS;

/**
 * Vaccin. 
 */
global CHIP_VACCINE;

/**
 * Foudre. 
 */
global CHIP_LIGHTNING;

/**
 * Forteresse. 
 */
global CHIP_FORTRESS;

/**
 * Adrénaline. 
 */
global CHIP_ADRENALINE;

/**
 * Éboulement. 
 */
global CHIP_ROCKFALL;

/**
 * Libération. 
 */
global CHIP_LIBERATION;

/**
 * Iceberg. 
 */
global CHIP_ICEBERG;

/**
 * Résurrection. 
 */
global CHIP_RESURRECTION;

/**
 * Météorite. 
 */
global CHIP_METEORITE;

/**
 * Réflexes. 
 */
global CHIP_REFLEXES;

/**
 * Dopage. 
 */
global CHIP_DOPING;

/**
 * Bottes de 7 lieues. 
 */
global CHIP_SEVEN_LEAGUE_BOOTS;

/**
 * Rage. 
 */
global CHIP_RAGE;

/**
 * Retourne la valeur absolue du nombre <b>number</b>
 * Vous pouvez utiliser aussi #signum, #sqrt ou #cbrt.
 * @param number Le nombre dont la valeur absolue sera calculée
 * @return La valeur absolue du nombre
 */
function abs(number) {
}

/**
 * Calcule l'arc cosinus d'<b>argument</b>, dans l'intervalle [0, #PI]
 * @param argument Nombre dont l'arc cosinus sera calculé
 * @return L'arc cosinus d'<b>argument</b>
 */
function acos(argument) {
}

/**
 * Retourne l'élément de valeur maximale du tableau <b>array</b>.
 * Pour plus d'informations sur la valeur maximale d'un tableau voir #sort.
 * @param array Tableau dans lequel sera recherchée la valeur maximale
 * @return Elément de valeur maximale
 */
function arrayMax(array) {
}

/**
 * Retourne l'élément de valeur minimale du tableau <b>array</b>.
 * Pour plus d'informations sur la valeur minimale d'un tableau voir #sort.
 * @param array Tableau dans lequel sera recherchée la valeur minimale
 * @return Elément de valeur minimale
 */
function arrayMin(array) {
}

/**
 * Calcule l'arc sinus d'<b>argument</b>, dans l'intervalle [0, #PI]
 * @param argument Nombre dont l'arc sinus sera calculé
 * @return L'arc sinus d'<b>argument</b>
 */
function asin(argument) {
}

/**
 * Trie le tableau <b>array</b> en conservant l'association clé : valeur
 * @param array Le tableau à trier.
 */
function assocSort(array) {
}

/**
 * Trie le tableau <b>array</b> en conservant l'association clé : valeur selon l'order <b>order</b>.
 * @param array Le tableau à trier.
 * @param order L'ordre de tri : #SORT_ASC ou #SORT_DESC.
 */
function assocSort(array, order) {
}

/**
 * Calcule l'arc tangente d'<b>argument</b>, dans l'intervalle [0, #PI]
 * @param argument Nombre dont l'arc tangente sera calculée
 * @return L'arc tangente d'<b>argument</b>
 */
function atan(argument) {
}

/**
 * Convertis les coordonnées cartésiennes (<b>x</b>, <b>y</b>) en coordonnées polaires (<b>r</b>, <b>theta</b>). Cette fonction retourne l'angle <b>theta</b> entre -#PI et #PI en utilisant les signes des arguments.
 * @param y Coordonnée en y
 * @param x Coordonnée en x
 * @return L'angle <b>theta</b> en coordonnées polaires du point (x, y).
 */
function atan2(y, x) {
}

/**
 * Calcule la moyenne des éléments contenus dans le tableau <b>array</b>
 * @param array Tableau dont on veut calculer la moyenne
 * @return Valeur moyenne
 */
function average(array) {
}

/**
 * Détermine si votre poireau peut utiliser la puce <b>chip</b> sur le poireau d'id <b>leek</b>.
 * @param chip Le numéro de la puce à tester.
 * @param leek L'id du poireau sur lequel vous voulez utiliser la puce.
 * @return <i>true</i> si votre poireau peut utiliser la puce, <i>false</i> sinon.
 */
function canUseChip(chip, leek) {
}

/**
 * Détermine si votre poireau peut utiliser la puce <b>chip</b> sur la cellule <b>cell</b>.
 * @param chip Le numéro de la puce à tester.
 * @param cell Le numéro de la cellule sur laquelle vous voulez utliser la puce.
 * @return <i>true</i> si votre poireau peut utiliser la puce, <i>false</i> sinon.
 */
function canUseChipOnCell(chip, cell) {
}

/**
 * Détermine si votre poireau peut tirer sur le poireau d'id <b>leek</b> avec son arme courante.
 * @param leek L'id du poireau sur lequel vous voulez tirer.
 * @return <i>true</i> si votre poireau peut tirer, <i>false</i> sinon.
 */
function canUseWeapon(leek) {
}

/**
 * Détermine si votre poireau peut tirer sur la cellule <b>cell</b> avec son arme courante.
 * @param cell Le numéro de la cellule sur laquelle vous voulez tirer.
 * @return <i>true</i> si votre poireau peut tirer, <i>false</i> sinon.
 */
function canUseWeaponOnCell(cell) {
}

/**
 * Calcule la racine cubique de <b>number</b>
 * @param number Nombre dont on veut calculer la racine cubique
 * @return Racine cubique de <b>number</b>
 */
function cbrt(number) {
}

/**
 * Retourne l'arrondi à l'entier supérieur de <b>number</b>.
 * Vous pouvez trouver l'arrondi à l'entier inférieur avec #floor, et l'arrondi avec #round.
 * @param number Nombre dont on veut trouver l'arrondi supérieur
 * @return Arrondi à l'entier supérieur de <b>number</b>
 */
function ceil(number) {
}

/**
 * Retourne le caractère de la chaîne <b>string</b> situé à la position <b>position</b>.
 * Le premier caractère de la chaîne se trouve à la position 0.
 * @param string Chaîne dont on veut récupérer un caractère
 * @param position Position du caractère à trouver
 * @return chaîne contenant le caractère recherché, ou une chaîne vide si la position est invalide
 */
function charAt(string, position) {
}

/**
 * Détermine si une chaîne <b>search</b> se trouve dans une chaîne <b>string</b>.
 * @param string Chaîne dans laquelle la recherche sera effectuée
 * @param search Chaîne à rechercher
 * @return true si <b>search</b> est dans <b>string</b>, false sinon
 */
function contains(string, search) {
}

/**
 * Calcule le cosinus de <b>angle</b>
 * @param angle Nombre dont le cosinus sera calculé (en radians)
 * @return Le cosinus de <b>angle</b>, dans l'intervalle [-1, 1]
 */
function cos(angle) {
}

/**
 * Compte le nombre d'éléments du tableau <b>array</b>
 * @param array Tableau dont le nombre d'éléments sera compté
 * @return Nombre d'éléments du tableau
 */
function count(array) {
}

/**
 * Enregistre un message <b>object</b> dans le log personnel, disponible dans le rapport à la fin du combat.
 * @param object Le message à enregistrer.
 */
function debug(object) {
}

/**
 * Enregistre un message d'erreur <b>object</b> dans le log personnel, disponible dans le rapport à la fin du combat.
 * Les messages d'erreur apparaissent en rouge dans le rapport de combat.
 * @param object Le message d'erreur à enregistrer.
 */
function debugE(object) {
}

/**
 * Enregistre un message d'avertissement <b>object</b> dans le log personnel, disponible dans le rapport à la fin du combat. 
 * Les messages d'avertissement apparaissent en orange dans le rapport de combat.
 * @param object Le message d'avertissement à enregistrer.
 */
function debugW(object) {
}

/**
 * Détermine si une chaîne <b>string</b> se termine par une chaîne <b>suffix</b>.
 * @param string Chaîne dans laquelle la recherche sera effectuée
 * @param suffix Suffixe à rechercher
 * @return true si <b>string</b> se termine par <b>suffix</b>
 */
function endsWith(string, suffix) {
}

/**
 * Éleve le nombre d'Euler #E à la puissance <b>number</b>.
 * @param number L'exposant auquel #E sera élevé.
 * @return #E ^ <b>number</b>.
 */
function exp(number) {
}

/**
 * Remplit le tableau <b>array</b> en remplaçant chaque élément déjà existant par <b>value</b>.
 * @param array Le tableau à remplir.
 * @param value La valeur pour chaque case du tableau.
 */
function fill(array, value) {
}

/**
 * Redimensionne le tableau <b>array</b> à la taille <b>size</b> et remplit toutes ses cases avec <b>value</b>.
 * @param array Le tableau à remplir.
 * @param value La valeur pour chaque case du tableau.
 * @param size Le nombre de cases.
 */
function fill(array, value, size) {
}

/**
 * Calcule l'arrondi à l'entier inférieur de <b>number</b>.
 * Vous pouvez trouver l'arrondi à l'entier supérieur avec #ceil, et l'arrondi avec #round.
 * @param number Nombre dont on veut trouver l'arrondi inférieur.
 * @return Arrondi à l'entier inférieur de <b>number</b>.
 */
function floor(number) {
}

/**
 * Retourne le bouclier absolu de votre poireau.
 * @return Le bouclier absolu de votre poireau.
 */
function getAbsoluteShield() {
}

/**
 * Retourne le bouclier absolu du poireau d'id <b>leek</b>. Pour récupérer directement le bouclier absolu de votre poireau, utilisez #getAbsoluteShield() sans paramètre.
 * @param leek L'id du poireau dont le bouclier absolu sera retourné.
 * @return Le bouclier absolu du poireau <b>leek</b>.
 */
function getAbsoluteShield(leek) {
}

/**
 * Retourne l'agilité de votre poireau.
 * @return L'agilité de votre poireau.
 */
function getAgility() {
}

/**
 * Retourne l'agilité du poireau d'id <b>leek</b>. Pour récupérer directement l'agilité de votre poireau, utilisez #getAgility() sans paramètre.
 * @param leek L'id du poireau dont l'agilité sera retournée.
 * @return L'agilité du poireau <b>leek</b>.
 */
function getAgility(leek) {
}

/**
 * Retourne un tableau de tous vos alliés vivants dans le combat.
 * @return Un tableau contenant les ids de tous vos alliés vivants.
 */
function getAliveAllies() {
}

/**
 * Retourne un tableau de tous vos ennemis vivants dans le combat.
 * @return Un tableau contenant les ids de tous vos ennemis vivants.
 */
function getAliveEnemies() {
}

/**
 * Renvoie le nombre d'ennemis vivants dans le combat.
 * @return Le nombre d'ennemis vivants.
 */
function getAliveEnemiesCount() {
}

/**
 * Retourne un tableau contenant vos alliés, et votre poireau.
 * @return Le tableau des alliés et votre poireau.
 */
function getAllies() {
}

/**
 * Renvoie le nombre d'alliés dans le combat.
 * @return Le nombre d'alliés.
 */
function getAlliesCount() {
}

/**
 * Retourne la vie totale de vos alliés.
 * @return La vie totale de vos alliés.
 */
function getAlliesLife() {
}

/**
 * Retourne la cellule où se trouve votre poireau.
 * @return Le numéro de la cellule où se trouve votre poireau.
 */
function getCell() {
}

/**
 * Retourne la cellule où se trouve le poireau d'id <b>leek</b>.
 * @param leek L'id du poireau dont la cellule sera retournée.
 * @return Le numéro de la cellule où se trouve le poireau <b>leek</b>.
 */
function getCell(leek) {
}

/**
 * Retourne le contenu d'une cellule d'id <b>cell</b>.
 * @param cell L'id de la cellule dont le contenu sera retourné.
 * @return Le contenu de la cellule <b>cell</b>
 */
function getCellContent(cell) {
}

/**
 * Retourne la distance entre deux cellules <b>cell1</b> et <b>cell2</b>. 
 * La distance retournée est exprimée en nombre de cellules, et ne tient pas compte des divers obstacles entre les deux cellules. Pour obtenir la distance à vol d'oiseau, voir #getDistance et pour obtenir la distance du chemin entre les deux cellules en évitant les obstacles, voir #getPathLength.
 * @param cell1 L'id de la cellule de départ.
 * @param cell2 L'id de la cellule d'arrivée.
 * @return La distance entre les deux cellules <b>cell1</b> et <b>cell2</b>.
 */
function getCellDistance(cell1, cell2) {
}

/**
 * Retourne l'id de la cellule se trouvant à la position (<b>x</b>, <b>y</b>).
 * @param x La position en x de la cellule.
 * @param y La position en y de la cellule.
 * @return L'id de la cellule à la position (<b>x</b>, <b>y</b>), <b>null</b> si la cellule n'existe pas.
 */
function getCellFromXY(x, y) {
}

/**
 * Retourne la liste des cellules à  partir desquelles votre poireau pourra utiliser la puce <b>chip</b> sur le poireau <b>leek</b>.
 * @param chip La puce que le poireau veut pouvoir utiliser.
 * @param leek Le poireau cible.
 * @return Liste des cellules d'où la puce pourra être utilisée.
 */
function getCellsToUseChip(chip, leek) {
}

/**
 * Retourne la liste des cellules à  partir desquelles votre poireau pourra utiliser la puce <b>chip</b> sur la cellule <b>cell</b>.
 * @param chip La puce que le poireau veut pouvoir utiliser.
 * @param cell La cellule cible.
 * @return Liste des cellules d'où la puce pourra être utilisée.
 */
function getCellsToUseChipOnCell(chip, cell) {
}

/**
 * Retourne la liste des cellules à  partir desquelles votre poireau pourra utiliser son arme sur le poireau <b>leek</b>.
 * @param leek Le poireau cible.
 * @return Liste des cellules d'où l'arme pourra être utilisée.
 */
function getCellsToUseWeapon(leek) {
}

/**
 * Retourne la liste des cellules à  partir desquelles votre poireau pourra utiliser son arme sur une cellule <b>cell</b>.
 * @param cell La cellule cible.
 * @return Liste des cellules d'où l'arme pourra être utilisée.
 */
function getCellsToUseWeaponOnCell(cell) {
}

/**
 * Détermine une cellule où votre poireau pourra utiliser la puce <b>chip</b> sur le poireau <b>leek</b>.
 * @param chip La puce que le poireau veut pouvoir utiliser.
 * @param leek Le poireau cible.
 * @return La cellule d'où la puce pourra être utilisée.
 */
function getCellToUseChip(chip, leek) {
}

/**
 * Détermine une cellule où votre poireau pourra utiliser la puce <b>chip</b> sur la cellule <b>cell</b>.
 * @param chip La puce que le poireau veut pouvoir utiliser.
 * @param cell La cellule cible.
 * @return La cellule d'où la puce pourra être utilisée.
 */
function getCellToUseChipOnCell(chip, cell) {
}

/**
 * Détermine une cellule où votre poireau pourra utiliser son arme sur le poireau <b>leek</b>.
 * @param leek Le poireau cible.
 * @return La cellule d'où l'arme pourra être utilisée.
 */
function getCellToUseWeapon(leek) {
}

/**
 * Détermine une cellule où votre poireau pourra utiliser son arme sur une cellule <b>cell</b>.
 * @param cell La cellule cible.
 * @return La cellule d'où l'arme pourra être utilisée.
 */
function getCellToUseWeaponOnCell(cell) {
}

/**
 * Détermine la position en X de la cellule <b>cell</b>.
 * @param cell La cellule dont la position en X sera déterminée.
 * @return La position en X de la cellule.
 */
function getCellX(cell) {
}

/**
 * Détermine la position en Y de la cellule <b>cell</b>.
 * @param cell La cellule dont la position en Y sera déterminée.
 * @return La position en Y de la cellule.
 */
function getCellY(cell) {
}

/**
 * Renvoie le cooldown de la puce <b>chip</b>.
 * @param chip La puce dont le cooldown sera renvoyé.
 * @return Le cooldown de la puce <b>chip</b>.
 */
function getChipCooldown(chip) {
}

/**
 * Renvoie le coût en PT de la puce <b>chip</b>.
 * @param chip La puce dont le coût sera renvoyé.
 * @return Le coût de la puce <b>chip</b>.
 */
function getChipCost(chip) {
}

/**
 * Renvoie la liste des cellules qui seront affectés si la puce <b>chip</b> est utilisée sur la cellule <b>cell</b>.
 * @param chip La puce à tester.
 * @param cell La cellule cible.
 * @return Le tableau contenant les ids de toutes les cellules qui seront affectés.
 */
function getChipEffectiveArea(chip, cell) {
}

/**
 * Renvoie les effets de la puce <b>chip</b>.
 * @param chip La puce dont les effets seront renvoyés.
 * @return Les effets de la puce <b>chip</b>.
 */
function getChipEffects(chip) {
}

/**
 * Renvoie le pourcentage de risque d'échec de la puce <b>chip</b>.
 * @param chip La puce dont le pourcentage d'échec sera renvoyé.
 * @return Pourcentage d'échec de la puce <b>chip</b>.
 */
function getChipFailure(chip) {
}

/**
 * Renvoie la portée maximale de la puce <b>chip</b>.
 * @param chip La puce dont la portée maximale sera renvoyée.
 * @return La portée maximale de la puce <b>chip</b>.
 */
function getChipMaxScope(chip) {
}

/**
 * Renvoie la portée minimale de la puce <b>chip</b>.
 * @param chip La puce dont la portée minimale sera renvoyée.
 * @return La portée minimale de la puce <b>chip</b>.
 */
function getChipMinScope(chip) {
}

/**
 * Renvoie le nom de la puce <b>chip</b>.
 * @param chip La puce dont le nom sera renvoyé.
 * @return Le nom de la puce <b>chip</b>.
 */
function getChipName(chip) {
}

/**
 * Renvoie les puces de votre poireau.
 * @return Un tableau contenant les ids des puces de votre poireau.
 */
function getChips() {
}

/**
 * Renvoie les puces du poireau d'id <b>leek</b>.
 * @param leek L'id du poireau dont les puces seront renvoyées.
 * @return Un tableau contenant les ids des puces du poireau <b>leek</b>.
 */
function getChips(leek) {
}

/**
 * Renvoie les poireaux qui seront affectés si la puce <b>chip</b> est utilisée sur la cellule <b>cell</b>.
 * @param chip La puce à tester.
 * @param cell La cellule cible.
 * @return Le tableau contenant les ids de tous les poireaux qui seront affectés.
 */
function getChipTargets(chip, cell) {
}

/**
 * Renvoie le nombre de coeurs de votre poireau.
 * @return Le nombre de coeurs de votre poireau.
 */
function getCores() {
}

/**
 * Renvoie le nombre de coeurs du poireau d'id <b>leek</b>.
 * @param leek Le poireau dont le nombre de coeurs sera retournée.
 * @return Le nombre de coeurs du poireau <b>leek</b>.
 */
function getCores(leek) {
}

/**
 * Renvoie le cooldown actuel de la puce <b>chip</b>.
 * @param chip La puce dont le cooldown actuel sera renvoyé.
 * @return Le cooldown actuel de la puce <b>chip</b>.
 */
function getCurrentCooldown(chip) {
}

/**
 * Renvoie les poireaux alliés morts.
 * @return Le tableau des poireaux alliés morts.
 */
function getDeadAllies() {
}

/**
 * Renvoie les poireaux ennemis morts.
 * @return Le tableau des poireaux ennemis morts.
 */
function getDeadEnemies() {
}

/**
 * Renvoie le nombre d'ennemis morts dans le combat.
 * @return Le nombre d'ennemis morts.
 */
function getDeadEnemiesCount() {
}

/**
 * Calcule la distance à vol d'oiseau entre deux cellules <b>cell1</b> et <b>cell2</b>. 
 * Pour obtenir la distance en nombre de cellules, voir #getCellDistance, et pour obtenir la longueur du chemin entre les deux cellules en esquivant les divers obstacles, voir #getPathLength.
 * @param cell1 La cellule de départ.
 * @param cell2 La cellule d'arrivée.
 * @return La distance à vol d'oiseau entre les deux cellules.
 */
function getDistance(cell1, cell2) {
}

/**
 * Retourne la liste des effets de votre poireau.
 * @return La liste des effets de votre poireau. Voir #getEffects(leek) pour le détail sur le retour.
 */
function getEffects() {
}

/**
 * Retourne la liste des effets du poireau d'id <b>leek</b>. Pour récupérer directement la liste des effets de votre poireau, utilisez #getEffects() sans paramètre.
 * @param leek L'id du poireau dont la liste des effets sera retourné.
 * @return La liste des effets du poireau <b>leek</b>.
 * 	La liste des effets est un tableau contenant les effets.
 * 	Un effet est lui-même un tableau de 2 cases de la forme : [<b>type</b>, <b>value</b>], où <b>type</b> est le type de l'effet
 * 	parmis :
 * 	<ul>
 * 		<li>#EFFECT_DAMAGE, <b>value</b> est le nombre de dégâts</li>
 * 		<li>#EFFECT_HEAL, <b>value</b> est le nombre de PV soignés</li>
 * 		<li>#EFFECT_BUFF_FORCE, <b>value</b> est la force gagnée</li>
 * 		<li>#EFFECT_BUFF_AGILITY, <b>value</b> est l'agilité gagnée</li>
 * 		<li>#EFFECT_BUFF_TP, <b>value</b> est le nombre de PT gagnés</li>
 * 		<li>#EFFECT_BUFF_MP, <b>value</b> est le nombre de PM gagnés</li>
 * 		<li>#EFFECT_ABSOLUTE_SHIELD, <b>value</b> est le bouclier absolu gagné</li>
 * 		<li>#EFFECT_RELATIVE_SHIELD, <b>value</b> est le bouclier relatif gagné</li>
 * 		<li>#EFFECT_DEBUFF, indique un débuff, <b>value</b> ne représente rien dans ce cas.</li>
 * 	</ul>
 */
function getEffects(leek) {
}

/**
 * Renvoie les poireaux ennemis (vivants ou morts) dans le combat.
 * @return Un tableau contenant les ids de tous les poireaux ennemis.
 */
function getEnemies() {
}

/**
 * Renvoie le nombre d'ennemis dans le combat.
 * @return Le nombre d'ennemis.
 */
function getEnemiesCount() {
}

/**
 * Calcule la somme des points de vie de tous les poireaux ennemis.
 * @return La somme des points de vie de l'équipe ennemie.
 */
function getEnemiesLife() {
}

/**
 * Détermine l'allié le plus éloigné de votre poireau, à vol d'oiseau.
 * @return L'id du poireau allié le plus éloigné.
 */
function getFarthestAlly() {
}

/**
 * Détermine l'ennemi le plus éloigné de votre poireau, à vol d'oiseau.
 * @return L'id du poireau ennemi le plus éloigné.
 */
function getFarthestEnemy() {
}

/**
 * Retourne le contexte du combat actuel.
 * @return Selon le contexte du combat : Combat de test (#FIGHT_CONTEXT_TEST), Combat en arène (#FIGHT_CONTEXT_GARDEN), Combat en tournoi (#FIGHT_CONTEXT_TOURNAMENT), Combat en défi (#FIGHT_CONTEXT_CHALLENGE)
 */
function getFightContext() {
}

/**
 * Retourne le type de combat actuel.
 * @return Selon le type de combat : Combat en solo (#FIGHT_TYPE_SOLO), Combat d'éleveur (#FIGHT_TYPE_FARMER), Combat d'équipe (#FIGHT_TYPE_TEAM)
 */
function getFightType() {
}

/**
 * Renvoie la force de votre poireau.
 * @return La force de votre poireau.
 */
function getForce() {
}

/**
 * Renvoie la force du poireau d'id <b>leek</b>.
 * @param leek Le poireau dont la force sera retournée.
 * @return La force du poireau <b>leek</b>.
 */
function getForce(leek) {
}

/**
 * Renvoie la fréquence de votre poireau.
 * @return La fréquence de votre poireau.
 */
function getFrequency() {
}

/**
 * Renvoie la fréquence du poireau d'id <b>leek</b>.
 * @param leek Le poireau dont la fréquence sera retournée.
 * @return La fréquence du poireau <b>leek</b>.
 */
function getFrequency(leek) {
}

/**
 * Renvoie le nombre d'instructions que votre poireau a effectué durant le tour actuel.
 * @return Le nombre d'instructions que votre poireau a effectué durant le tour actuel.
 */
function getInstructionsCount() {
}

/**
 * Renvoie l'id de votre poireau.
 * @return L'id de votre poireau.
 */
function getLeek() {
}

/**
 * Renvoie le poireau qui se trouve sur la cellule <b>cell</b>.
 * @param cell La cellule dont on veut récupérer le poireau.
 * @return L'id du poireau se trouvant sur la cellule, ou -1 si la cellule ne comporte pas de poireau.
 */
function getLeekOnCell(cell) {
}

/**
 * Renvoie le niveau de votre poireau.
 * @return Le niveau de votre poireau.
 */
function getLevel() {
}

/**
 * Renvoie le niveau du poireau d'id <b>leek</b>.
 * @param leek L'id du poireau dont le niveau sera renvoyé.
 * @return Le niveau du poireau d'id <b>leek</b>.
 */
function getLevel(leek) {
}

/**
 * Renvoie la vie actuelle de votre poireau.
 * @return La vie de votre poireau.
 */
function getLife() {
}

/**
 * Renvoie la vie actuelle du poireau d'id <b>leek</b>.
 * @param leek L'id du poireau dont la vie sera renvoyée.
 * @return La vie actuelle du poireau <b>leek</b>.
 */
function getLife(leek) {
}

/**
 * Renvoie l'id du poireau auteur du message <b>message</b>.
 * @param message Le message dont l'auteur sera renvoyé.
 * @return L'id du poireau auteur du message <b>message</b>.
 */
function getMessageAuthor(message) {
}

/**
 * Renvoie le tableau des paramètres du message <b>message</b>.
 * @param message Le message dont les paramètres seront renvoyés.
 * @return Les paramètres du message <b>message</b>.
 */
function getMessageParams(message) {
}

/**
 * Renvoie le tableau de vos messages.
 * @return Le tableau de vos messages.
 * Un message est représenté lui-même sous la forme d'un
 * 	tableau de la forme : [<b>auteur</b>, <b>type</b>, <b>paramètres</b>]
 * 
 * 	Les différents types de messages sont représentés par les constantes :
 * 	<ul>
 * 		<li>#MESSAGE_HEAL : demande de soins</li>
 * 		<li>#MESSAGE_ATTACK : demande d'attaquer</li>
 * 		<li>#MESSAGE_BUFF_FORCE : demande de boost force</li>
 * 		<li>...</li>
 * 	</ul>
 */
function getMessages() {
}

/**
 * Renvoie le tableau des messages du poireau <b>leek</b>.
 * @param leek Le poireau dont les messages seront renvoyés.
 * @return Le tableau des messages du poireau <b>leek</b>
 */
function getMessages(leek) {
}

/**
 * Renvoie le type du message <b>message</b>.
 * @param message Le message dont le type sera renvoyé (parmis #MESSAGE_HEAL, #MESSAGE_ATTACK, etc.).
 * @return Le type du message <b>message</b>.
 */
function getMessageType(message) {
}

/**
 * Revoie le nombre de points de mouvements actuel de votre poireau.
 * @return Le nombre de PM de votre poireau.
 */
function getMP() {
}

/**
 * Revoie le nombre de points de mouvements actuel du poireau <b>leek</b>.
 * @param leek L'id du poireau dont le nombre de PM sera renvoyé.
 * @return Le nombre de PM du poireau <b>leek</b>.
 */
function getMP(leek) {
}

/**
 * Renvoie le nom de votre poireau.
 * @return Le nom de votre poireau.
 */
function getName() {
}

/**
 * Renvoie le nom du poireau d'id <b>leek</b>.
 * @param leek L'id du poireau dont le nom sera renvoyé.
 * @return Le nom du poireau <b>leek</b>.
 */
function getName(leek) {
}

/**
 * Renvoie le poireau allié le plus proche de votre poireau.
 * @return L'id du poireau allié le plus proche.
 */
function getNearestAlly() {
}

/**
 * Renvoie le poireau allié le plus proche du poireau fourni en paramètre.
 * @param leek L'id du poireau dont on veut connaitre l'allié le plus proche.
 * @return L'id du poireau allié le plus proche.
 */
function getNearestAllyTo(leek) {
}

/**
 * Renvoie le poireau allié le plus proche de la cellule fournie en paramètre.
 * @param cell L'id de la cellule dont on veut connaitre l'allié le plus proche.
 * @return L'id du poireau allié le plus proche.
 */
function getNearestAllyToCell(cell) {
}

/**
 * Renvoie le poireau ennemi le plus proche de votre poireau.
 * @return L'id du poireau ennemi le plus proche.
 */
function getNearestEnemy() {
}

/**
 * Renvoie le poireau ennemi le plus proche du poireau fourni en paramètre.
 * @param leek L'id du poireau dont on veut connaitre l'ennemi le plus proche.
 * @return L'id du poireau ennemi le plus proche.
 */
function getNearestEnemyTo(leek) {
}

/**
 * Renvoie le poireau ennemi le plus proche de la cellule fournie en paramètre.
 * @param cell L'id de la cellule dont on veut connaitre l'ennemi le plus proche.
 * @return L'id du poireau ennemi le plus proche.
 */
function getNearestEnemyToCell(cell) {
}

/**
 * Renvoie l'id du poireau qui jouera après le joueur actuel.
 * @return Le joueur suivant.
 */
function getNextPlayer() {
}

/**
 * Renvoie le chemin en évitant les obstacles entre deux cellules <b>cell1</b> et <b>cell2</b>, si celui-ci existe.
 * @param cell1 La cellule de départ.
 * @param cell2 La cellule d'arrivée.
 * @return Le tableau contenant les cellules constituant le chemin entre les deux cellules.
 */
function getPath(cell1, cell2) {
}

/**
 * Renvoie la longueur du chemin entre deux cellules <b>cell1</b> et <b>cell2</b>, en esquivant les obstacles. Cette fonction équivaut à <i>count(getPath(<b>cell1</b>, <b>cell2</b>))</i>.
 * 
 * Pour obtenir la distance à vol d'oiseau, utilisez #getDistance, et pour obtenir la distance entre deux cellules sans tenir compte des obstacles, utilisez #getCellDistance.
 * @param cell1 La cellule de départ.
 * @param cell2 La cellule d'arrivée.
 * @return La longueur du chemin entre <b>cell1</b> et <b>cell2</b>.
 */
function getPathLength(cell1, cell2) {
}

/**
 * Renvoie l'id du poireau ayant joué avant le joueur actuel.
 * @return Le joueur précédent.
 */
function getPreviousPlayer() {
}

/**
 * Retourne le bouclier relatif de votre poireau.
 * @return Le bouclier relatif de votre poireau.
 */
function getRelativeShield() {
}

/**
 * Retourne le bouclier relatif du poireau d'id <b>leek</b>. Pour récupérer directement le bouclier relatif de votre poireau, utilisez #getRelativeShield() sans paramètre.
 * @param leek L'id du poireau dont le bouclier relatif sera retourné.
 * @return Le bouclier relatif du poireau <b>leek</b>.
 */
function getRelativeShield(leek) {
}

/**
 * Renvoie la vie totale de votre poireau.
 * @return La vie totale de votre poireau.
 */
function getTotalLife() {
}

/**
 * Renvoie la vie totale du poireau d'id <b>leek</b>.
 * @param leek L'id du poireau dont la vie totale sera retournée.
 * @return La vie totale du poireau.
 */
function getTotalLife(leek) {
}

/**
 * Renvoie le nombre de points de tour de votre poireau.
 * @return Le nombre de PT de votre poireau.
 */
function getTP() {
}

/**
 * Renvoie le nombre de points de tour du poireau <b>leek</b>.
 * @param leek L'id du poireau dont les PT seront renvoyés.
 * @return Le nombre de PT du poireau <b>leek</b>.
 */
function getTP(leek) {
}

/**
 * Renvoie le tour actuel du combat. Le nombre de tours maximum est #MAX_TURNS.
 * @return Le tour actuel du combat.
 */
function getTurn() {
}

/**
 * Renvoie l'arme actuellement équipée sur votre poireau.
 * @return L'id de l'arme actuellement équipée sur votre poireau, null si votre poireau n'a pas d'arme équipée.
 */
function getWeapon() {
}

/**
 * Renvoie l'arme actuellement équipée le poireau <b>leek</b>.
 * @param leek L'id du poireau dont l'arme actuelle sera renvoyée.
 * @return L'id de l'arme actuellement équipée le poireau <b>leek</b>, null si le poireau n'a pas d'arme équipée ou si le poireau n'existe pas.
 */
function getWeapon(leek) {
}

/**
 * Renvoie le coût en PT de l'arme <b>weapon</b>.
 * @param weapon L'id de l'arme dont le coût sera renvoyé.
 * @return Le coût en PT de l'arme <b>weapon</b>.
 */
function getWeaponCost(weapon) {
}

/**
 * Renvoie la liste des cellules qui seront affectés si l'arme courante est utilisée sur la cellule <b>cell</b>.
 * @param cell La cellule cible.
 * @return Le tableau contenant les ids de toutes les cellules qui seront affectés.
 */
function getWeaponEffectiveArea(cell) {
}

/**
 * Renvoie les effets de l'arme <b>weapon</b>.
 * @param weapon L'id de l'arme dont les effets seront retournés.
 * @return Un tableau contenant les effets de l'arme <b>weapon</b>.
 */
function getWeaponEffects(weapon) {
}

/**
 * Renvoie le pourcentage de risque d'échec de l'arme <b>weapon</b>.
 * @param weapon L'id de l'arme dont le pourcentage d'échec sera renvoyé.
 * @return Pourcentage d'échec de l'arme <b>weapon</b>.
 */
function getWeaponFailure(weapon) {
}

/**
 * Renvoie la portée maximale de l'arme <b>weapon</b>.
 * @param weapon L'id de l'arme dont la portée maximale sera renvoyée.
 * @return La portée maximale de l'arme <b>weapon</b>.
 */
function getWeaponMaxScope(weapon) {
}

/**
 * Renvoie la portée minimale de l'arme <b>weapon</b>.
 * @param weapon L'id de l'arme dont la portée minimale sera renvoyée.
 * @return La portée minimale de l'arme <b>weapon</b>.
 */
function getWeaponMinScope(weapon) {
}

/**
 * Renvoie le nom de l'arme <b>weapon</b>.
 * @param weapon L'id de l'arme dont le nom sera renvoyé.
 * @return Le nom de l'arme <b>weapon</b>.
 */
function getWeaponName(weapon) {
}

/**
 * Renvoie les armes de votre poireau.
 * @return Un tableau contenant les ids des armes de votre poireau.
 */
function getWeapons() {
}

/**
 * Renvoie les armes du poireau d'id <b>leek</b>.
 * @param leek L'id du poireau dont les armes seront renvoyées.
 * @return Un tableau contenant les ids des armes du poireau <b>leek</b>.
 */
function getWeapons(leek) {
}

/**
 * Renvoie les poireaux qui seront affectés si l'arme courante est utilisée sur la cellule <b>cell</b>.
 * @param cell La cellule cible.
 * @return Le tableau contenant les ids de tous les poireaux qui seront affectés.
 */
function getWeaponTargets(cell) {
}

/**
 * Renvoie l'hypoténuse du triangle rectangle de côtés x et y. Équivaut à <i>sqrt(x^2 + y^2)</i>.
 * @param x La valeur x.
 * @param y La valeur y.
 * @return <i>sqrt(x^2 + y^2)</i>.
 */
function hypot(x, y) {
}

/**
 * Détermine si l'élément <b>element</b> est dans le tableau <b>array</b>.
 * @param array Le tableau de recherche.
 * @param element L'élément à rechercher.
 * @return <i>vrai</i> si l'élément est dans le tableau, <i>faux</i> sinon.
 */
function inArray(array, element) {
}

/**
 * Détermine la position de la première occurrence de la chaîne <b>search</b> dans la chaîne <b>string</b>.
 * @param string La chaîne où la recherche sera effectuée.
 * @param search La chaîne à rechercher.
 * @return La position de la première occurrence de <b>search</b> dans <b>string</b>, -1 si la chaîne n'a pas été trouvée.
 */
function indexOf(string, search) {
}

/**
 * Détermine la position de la première occurrence de la chaîne <b>search</b> dans la chaîne <b>string</b>, à partir de la position <b>start</b>.
 * @param string La chaîne où la recherche sera effectuée.
 * @param search La chaîne à rechercher.
 * @param start La position de départ de la recherche.
 * @return La position de la première occurrence de <b>search</b> dans <b>string</b> à partir de <b>start</b>, -1 si la chaîne n'a pas été trouvée.
 */
function indexOf(string, search, start) {
}

/**
 * Insère un élément <b>element</b> dans le tableau <b>array</b> à la position <b>position</b>.
 * @param array Le tableau où l'élément sera inséré.
 * @param element L'élément à insérer.
 * @param position La position de l'insertion.
 */
function insert(array, element, position) {
}

/**
 * Détermine si un poireau <b>leek</b> est vivant. Équivant à <i>getLife(<b>leek</b>) > 0</i>.
 * @param leek L'id du poireau à tester.
 * @return <i>vrai</i> si le poireau <b>leek</b> est vivant, <i>faux</i> si il est mort.
 */
function isAlive(leek) {
}

/**
 * Détermine si le poireau <b>leek</b> est votre allié.
 * @param leek L'id du poireau à tester.
 * @return <i>vrai</i> si le poireau <b>leek</b> est votre allié ou bien vous-même, <i>faux</i> si il s'agit d'un ennemi.
 */
function isAlly(leek) {
}

/**
 * Détermine si le poireau <b>leek</b> est mort. Équivant à <i>getLife(<b>leek</b>) == 0</i>.
 * @param leek L'id du poireau à tester.
 * @return <i>vrai</i> si le poireau <b>leek</b> est mort, <i>faux</i> si il est vivant.
 */
function isDead(leek) {
}

/**
 * Détermine si le tableau <b>array</b> est vide. Équivant à <i>count(<b>array</b>) == 0</i>.
 * @param array Le tableau à tester.
 * @return <i>vrai</i> si le tableau est vide, <i>faux</i> sinon.
 */
function isEmpty(array) {
}

/**
 * Détermine si une cellule est vide.
 * @param cell La cellule à tester.
 * @return <i>vrai</i> si la cellule est vide, <i>faux</i> sinon.
 */
function isEmptyCell(cell) {
}

/**
 * Détermine si le poireau <b>leek</b> est votre ennemi.
 * @param leek L'id du poireau à tester.
 * @return <i>vrai</i> si le poireau <b>leek</b> est un ennemi, <i>faux</i> si il s'agit d'un allié ou bien vous-même.
 */
function isEnemy(leek) {
}

/**
 * Détermine si la puce <b>chip</b> peut être utlisée uniquement en ligne.
 * @param chip L'id de la puce à tester.
 * @return <i>vrai</i> si la puce est utilisable uniquement en ligne, <i>faux</i> sinon.
 */
function isInlineChip(chip) {
}

/**
 * Détermine si l'arme <b>weapon</b> peut être utlisée uniquement en ligne.
 * @param weapon L'id de l'arme à tester.
 * @return <i>vrai</i> si l'arme est utilisable uniquement en ligne, <i>faux</i> sinon.
 */
function isInlineWeapon(weapon) {
}

/**
 * Détermine si le contenu de la cellule <b>cell</b> est un poireau.
 * @param cell La cellule à tester.
 * @return <i>vrai</i> si la cellule contient un poireau, <i>faux</i> sinon.
 */
function isLeek(cell) {
}

/**
 * Détermine si le contenu de la cellule <b>cell</b> est un obstacle.
 * @param cell La cellule à tester.
 * @return <i>vrai</i> si la cellule contient un obstacle, <i>faux</i> sinon.
 */
function isObstacle(cell) {
}

/**
 * Détermine si deux cellules <b>cell1</b> et <b>cell2</b> sont sur la même ligne.
 * @param cell1 La première cellule.
 * @param cell2 La deuxième cellule.
 * @return <i>vrai</i> si les deux cellules sont sur la même ligne, <i>faux</i> sinon.
 */
function isOnSameLine(cell1, cell2) {
}

/**
 * Fusionne plusieurs éléments en une chaîne de caractères, en les séparant par un délimiteur <b>glue</b>.
 * @param array Un tableau d'éléments à fusionner.
 * @param glue Le délimiteur des éléments.
 * @return La chaîne de caractère résultante de la fusion.
 */
function join(array, glue) {
}

/**
 * Trie le tableau <b>array</b> selon les clés.
 * @param array Le tableau à trier.
 */
function keySort(array) {
}

/**
 * Trie le tableau <b>array</b> selon les clés selon l'ordre <b>order</b>.
 * @param array Le tableau à trier.
 * @param order L'ordre de tri : #SORT_ASC ou #SORT_DESC.
 */
function keySort(array, order) {
}

/**
 * Renvoie la longueur de la chaîne <b>string</b>.
 * @param string La chaîne dont la longueur sera retournée.
 * @return La longueur de la chaîne <b>string</b>.
 */
function length(string) {
}

/**
 * Calcule le logarithme néperien du nombre <b>number</b>.
 * @param number Un nombre compris dans l'intervalle ]0; +∞[.
 * @return Le logarithme néperien de <b>number</b>.
 */
function log(number) {
}

/**
 * Calcule le logarithme en base 10 du nombre <b>number</b>.
 * @param number Un nombre compris dans l'intervalle ]0; +∞[.
 * @return Le logarithme en base 10 de <b>number</b>.
 */
function log10(number) {
}

/**
 * Renvoie le plus grande valeur entre les deux nombres <b>a</b> et <b>b</b>.
 * @param a Un nombre.
 * @param b Un nombre.
 * @return Le plus grand nombre entre <b>a</b> et <b>b</b>.
 */
function max(a, b) {
}

/**
 * Renvoie la plus petite valeur entre les deux nombres <b>a</b> et <b>b</b>.
 * @param a Un nombre.
 * @param b Un nombre.
 * @return Le plus petit nombre entre <b>a</b> et <b>b</b>.
 */
function min(a, b) {
}

/**
 * Éloigne votre poireau d'un autre poireau <b>leek</b>.
 * @param leek Le poireau dont votre poireau doit s'éloigner.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFrom(leek) {
}

/**
 * Éloigne votre poireau d'un autre poireau <b>leek</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param leek Le poireau dont votre poireau doit s'éloigner.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFrom(leek, mp) {
}

/**
 * Éloigne votre poireau d'une cellule <b>cell</b>.
 * @param cell La cellule dont votre poireau doit s'éloigner.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromCell(cell) {
}

/**
 * Éloigne votre poireau d'une cellule <b>cell</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param cell La cellule dont votre poireau doit s'éloigner.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromCell(cell, mp) {
}

/**
 * Éloigne votre poireau d'un ensemble de cellules <b>cells</b>.
 * @param cells Le tableau contenant les cellules dont votre poireau doit s'éloigner.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromCells(cells) {
}

/**
 * Éloigne votre poireau d'un ensemble de cellules <b>cells</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param cells Le tableau contenant les cellules dont votre poireau doit s'éloigner.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromCells(cells, mp) {
}

/**
 * Éloigne votre poireau d'un ensemble de poireaux <b>leeks</b>.
 * @param leeks Le tableau contenant les ids des poireaux dont votre poireau doit s'éloigner.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromLeeks(leeks) {
}

/**
 * Éloigne votre poireau d'un ensemble de poireaux <b>leeks</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param leeks Le tableau contenant les ids des poireaux dont votre poireau doit s'éloigner.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromLeeks(leeks, mp) {
}

/**
 * Éloigne votre poireau d'une ligne définie par deux cellules <b>cell1</b> et <b>cell2</b>.
 * @param cell1 La cellule 1.
 * @param cell2 La cellule 2.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromLine(cell1, cell2) {
}

/**
 * Éloigne votre poireau d'une ligne définie par deux cellules <b>cell1</b> et <b>cell2</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param cell1 La cellule 1.
 * @param cell2 La cellule 2.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveAwayFromLine(cell1, cell2, mp) {
}

/**
 * Rapproche votre poireau d'un autre poireau <b>leek</b>.
 * @param leek Le poireau vers lequel votre poireau doit se rapprocher.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveToward(leek) {
}

/**
 * Rapproche votre poireau d'un autre poireau <b>leek</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param leek Le poireau vers lequel votre poireau doit se rapprocher.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveToward(leek, mp) {
}

/**
 * Rapproche votre poireau d'une cellule <b>cell</b>.
 * @param cell La cellule vers laquelle votre poireau doit se rapprocher.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardCell(cell) {
}

/**
 * Rapproche votre poireau d'une cellule <b>cell</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param cell La cellule vers laquelle votre poireau doit se rapprocher.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardCell(cell, mp) {
}

/**
 * Rapproche votre poireau d'un ensemble de cellules <b>cells</b>.
 * @param cells Le tableau contenant les cellules vers lesquelles votre poireau doit se rapprocher.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardCells(cells) {
}

/**
 * Rapproche votre poireau d'un ensemble de cellules <b>cells</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param cells Le tableau contenant les cellules vers lesquelles votre poireau doit se rapprocher.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardCells(cells, mp) {
}

/**
 * Rapproche votre poireau d'un ensemble de poireaux <b>leeks</b>.
 * @param leeks Le tableau contenant les ids des poireaux vers lesquels votre poireau doit se rapprocher.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardLeeks(leeks) {
}

/**
 * Rapproche votre poireau d'un ensemble de poireaux <b>leeks</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param leeks Le tableau contenant les ids des poireaux vers lesquels votre poireau doit se rapprocher.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardLeeks(leeks, mp) {
}

/**
 * Rapproche votre poireau d'une ligne définie par deux cellules <b>cell1</b> et <b>cell2</b>.
 * @param cell1 La cellule 1.
 * @param cell2 La cellule 2.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardLine(cell1, cell2) {
}

/**
 * Rapproche votre poireau d'une ligne définie par deux cellules <b>cell1</b> et <b>cell2</b>, en utilisant au maximum <b>mp</b> points de mouvement.
 * @param cell1 La cellule 1.
 * @param cell2 La cellule 2.
 * @param mp Le nombre maximum de PM à utiliser.
 * @return Le nombre de points de mouvements utilisés.
 */
function moveTowardLine(cell1, cell2, mp) {
}

/**
 * Convertit une valeur en nombre. Si la valeur est une chaîne, la fonction number va essayer de la convertir en nombre, si la valeur est déjà un nombre, la fonction renvoie le nombre, et pour tout autre type, elle renvoie <i>null</i>.
 * @param value La valeur à convertir en nombre.
 * @return Le nombre converti.
 */
function number(value) {
}

/**
 * Supprime la dernière case du tableau <b>array</b> et renvoie l'élément correspondant.
 * @param array Le tableau dont la dernière case sera supprimée.
 * @return L'élément qui était dans l'ancienne dernière case.
 */
function pop(array) {
}

/**
 * Éleve le nombre base à la puissance exposant.
 * @param base La base.
 * @param exp L'exposant.
 * @return <b>base</b> élevée à la puissance <b>exposant</b>.
 */
function pow(base, exp) {
}

/**
 * Ajoute l'élément <b>element</b> à la fin du tableau <b>array</b>.
 * @param array Le tableau où l'on veut ajouter l'élément.
 * @param element L'élément à ajouter.
 */
function push(array, element) {
}

/**
 * Ajoute tous les éléments du tableau <b>elements</b> à la fin du tableau <b>array</b>.
 * @param array Le tableau où l'on veut ajouter les éléments.
 * @param elements Les éléments à ajouter.
 */
function pushAll(array, elements) {
}

/**
 * Renvoie un nombre aléatoire réel, compris entre 0 (inclus) et 1 (exclu).
 * @return Un nombre aléatoire dans l'intervalle [0; 1[.
 */
function rand() {
}

/**
 * Renvoie un nombre aléatoire réel, compris entre <b>a</b> (inclus) et <b>b</b> (exclu).
 * @param a Borne inférieure.
 * @param b Borne supérieure.
 * @return Un nombre aléatoire dans l'intervalle [a; b[.
 */
function randFloat(a, b) {
}

/**
 * Renvoie un nombre aléatoire entier, compris entre <b>a</b> (inclus) et <b>b</b> (exclu).
 * @param a Borne inférieure.
 * @param b Borne supérieure.
 * @return L'élément supprimé.
 */
function randInt(a, b) {
}

/**
 * Supprime un élément du tableau <b>array</b> à la position <b>position</b>, et retourne l'élément supprimé.
 * @param array Tableau dont on veut supprimer un élément.
 * @param position Position de l'élément à supprimer.
 * @return func_remove_return
 */
function remove(array, position) {
}

/**
 * Supprime la première occurrence d'un élément <b>element</b> dans le tableau <b>array</b>. Si l'élement n'est pas trouvé, le tableau n'est pas modifié.
 * @param array Tableau dont on veut supprimer un élément.
 * @param element Élement à rechercher puis à supprimer.
 */
function removeElement(array, element) {
}

/**
 * Supprime un élément du tableau <b>array</b> associé à la clé <b>key</b>.
 * @param array Tableau dont on veut supprimer un élément.
 * @param key La clé associée à l'élément à supprimer.
 */
function removeKey(array, key) {
}

/**
 * Remplace toutes les occurrences de <b>search</b> par <b>replace</b> dans la chaîne <b>string</b>.
 * @param string Chaîne dans laquelle les remplacements sont effectués.
 * @param search Sous-chaîne à remplacer.
 * @param replace Chaîne de remplacement.
 * @return La chaîne résultat, avec les remplacements.
 */
function replace(string, search, replace) {
}

/**
 * Inverse le tableau <b>array</b>.
 * @param array Tableau à inverser.
 */
function reverse(array) {
}

/**
 * Retourne l'arrondi de <b>number</b>.
 * Vous pouvez trouver l'arrondi à l'entier inférieur avec #floor, et l'arrondi à l'entier supérieur avec #ceil.
 * @param number Nombre dont on veut trouver l'arrondi.
 * @return Arrondi de <b>number</b>.
 */
function round(number) {
}

/**
 * Fait parler votre poireau.
 * @param message Message qu'annonçera votre poireau dans l'arène.
 */
function say(message) {
}

/**
 * Recherche l'élément <b>element</b> dans le tableau <b>array</b>.
 * @param array Le tableau de recherche.
 * @param element L'élément à rechercher.
 * @return La position de la première occurrence de l'élément dans le tableau, null si l'élément n'a pas été trouvé.
 */
function search(array, element) {
}

/**
 * Recherche l'élément <b>element</b> dans le tableau <b>array</b>, à partir de la position <b>start</b>.
 * @param array Le tableau de recherche.
 * @param element L'élément à rechercher.
 * @param start La position du début de la recherche.
 * @return La position de la première occurrence de l'élément <b>element</b> dans le tableau <b>array</b>, à partir de <b>start</b>, null si l'élément n'a pas été trouvé.
 */
function search(array, element, start) {
}

/**
 * Envoie un message à toute votre équipe.
 * @param type Le type du message à envoyer (voir les constantes MESSAGE_*).
 * @param params Les paramètres du message, qui peuvent être n'importe quelle valeur.
 */
function sendAll(type, params) {
}

/**
 * Envoie un message au poireau d'id <b>leek</b>.
 * @param leek L'id du poireau auquel sera envoyé le message.
 * @param type Le type du message à envoyer (voir les constantes MESSAGE_*).
 * @param params Les paramètres du message, qui peuvent être n'importe quelle valeur.
 * @return func_sendTo_return
 */
function sendTo(leek, type, params) {
}

/**
 * Équipe l'arme <b>weapon</b> sur votre poireau.
 * @param weapon Id de l'arme à équiper.
 */
function setWeapon(weapon) {
}

/**
 * Supprime la première case du tableau <b>array</b> et renvoie l'élément correspondant.
 * @param array Le tableau dont la première case sera supprimée.
 * @return L'élément qui était dans l'ancienne première case.
 */
function shift(array) {
}

/**
 * Mélange un tableau de manière aléatoire.
 * @param array Le tableau à mélanger.
 */
function shuffle(array) {
}

/**
 * Détermine le signe du nombre <b>number</b>.
 * @param number Le nombre dont le signe sera déterminé.
 * @return 1 si le nombre est positif, 0 si le nombre est nul et -1 si le nombre est négatif.
 */
function signum(number) {
}

/**
 * Calcule le sinus de l'angle <b>angle</b> passé en paramètre
 * @param angle L'angle dont le sinus sera calculé
 * @return Retourne le sinus de l'angle <b>angle</b>
 */
function sin(angle) {
}

/**
 * Trie le tableau <b>array</b> selon l'ordre suivant :
 * <ul>
 * <li>Tous les booléens (d'abord faux puis vrais)</li>
 * <li>Tous les nombres (classés du plus petit au plus grand)</li>
 * <li>Toutes les chaînes (dans l'ordre alphabétique)</li>
 * <li>Tous les éléments null.</li>
 * </ul>
 * @param array Tableau à trier.
 */
function sort(array) {
}

/**
 * Trie le tableau <b>array</b> par ordre croissant ou décroissant. Voir #sort pour l'ordre de tri.
 * @param array Tableau à trier.
 * @param order #SORT_ASC pour trier <b>array</b> dans l'ordre croissant ou #SORT_DESC pour le trier dans l'ordre décroissant.
 */
function sort(array, order) {
}

/**
 * Découpe la chaîne <b>string</b> sous-chaînes en délimitées par <b>delimiter</b>.
 * @param string Chaîne à découper.
 * @param delimiter Chaîne délimitant le passage d'un élément à un autre.
 * @return Tableau contenant les sous-chaînes trouvées.
 */
function split(string, delimiter) {
}

/**
 * Découpe la chaîne <b>string</b> sous-chaînes en délimitées par <b>delimiter</b>.
 * @param string Chaîne à découper.
 * @param delimiter Chaîne délimitant le passage d'un élément à un autre.
 * @param limit Nombre d'éléments maximum du tableau.
 * @return Tableau contenant les sous-chaînes trouvées.
 */
function split(string, delimiter, limit) {
}

/**
 * Calcule la racine carrée du nombre <b>number</b>.
 * @param number Nombre dont la racine sera calculée.
 * @return Racine carrée de <b>number</b>.
 */
function sqrt(number) {
}

/**
 * Vérifie si la chaîne <b>string</b> commence par la chaîne <b>prefix</b>.
 * @param string Chaîne de recherche.
 * @param prefix Préfixe recherché.
 * @return Vrai si la <b>string</b> commence par <b>prefix</b>.
 */
function startsWith(string, prefix) {
}

/**
 * Convertit une valeur en chaîne de caractères.
 * 
 * 		Si la valeur est déjà une chaîne, elle est renvoyée.
 * 
 * 		Si la valeur est nombre x, "x" est renvoyé.
 * 
 * 		Si la valeur est un tableau, une chaîne sous la forme "[clé1 : valeur1, clé2 : valeur2, ...]" est renvoyée.
 * 
 * 		Si la valeur est un booléen, "true" et "false" sont respectivement renvoyées pour les valeurs true et false.
 * 
 * 		Si la valeur est null, "null" est renvoyée.
 * @param value La valeur à convertir en chaîne de caractères.
 * @return La chaîne convertie.
 */
function string(value) {
}

/**
 * Retourne un sous-tableau de <b>array</b> commençant à la position <b>start</b> et de taile <b>size</b>.
 * @param array Tableau source.
 * @param start Indice de départ.
 * @param size Taille du sous-tableau.
 * @return Sous-tableau.
 */
function subArray(array, start, size) {
}

/**
 * Retourne la sous-chaîne de la chaîne <b>string</b> à partir du caractère à l'indice <b>start</b>.
 * @param string Chaîne à découper.
 * @param start Indice du caractère de départ.
 * @return Sous-chaîne.
 */
function substring(string, start) {
}

/**
 * Retourne la sous-chaîne de la chaîne <b>string</b> à partir du caractère à l'indice <b>start</b> et de taille <b>length</b>.
 * @param string Chaîne à découper.
 * @param start Indice du caractère de départ.
 * @param length Longueur de la sous-chaîne.
 * @return Sous-chaîne.
 */
function substring(string, start, length) {
}

/**
 * Retourne la somme de tous les éléments numériques du tableau <b>array</b>.
 * @param array Tableau à sommer.
 * @return Somme des éléments du tableau.
 */
function sum(array) {
}

/**
 * Calcule la tangente de l'angle <b>angle</b> (en radians).
 * @param angle Angle en radians.
 * @return Tangente de <b>angle</b>.
 */
function tan(angle) {
}

/**
 * Convertit l'angle <b>radians</b> en degrés.
 * @param radians Valeur en radians
 * @return Angle en degrés.
 */
function toDegrees(radians) {
}

/**
 * Convertit les caractères majuscules de la chaîne <b>string</b> en minuscules.
 * @param string Chaîne à transformer
 * @return Chaîne en minuscules
 */
function toLower(string) {
}

/**
 * Convertit l'angle <b>degrees</b> en radians.
 * @param degrees Valeur en degrés
 * @return Angle en radians.
 */
function toRadians(degrees) {
}

/**
 * Convertit les caractères minuscules de la chaîne <b>string</b> par des majuscules.
 * @param string Chaîne à transformer.
 * @return Chaîne en majuscules.
 */
function toUpper(string) {
}

/**
 * Ajoute l'élément <b>element</b> au début du tableau <b>array</b>.
 * @param array Tableau dans lequel l'élément sera ajouté.
 * @param element Element à ajouter.
 */
function unshift(array, element) {
}

/**
 * Utilise le chip <b>chip</b> sur le poireau <b>leek</b>
 * @param chip Chip à utiliser
 * @param leek Poireau cible
 * @return Les valeurs de retour de useChip sont :
 * 
 * 	<ul>
 * 		<li>#USE_SUCCESS, en cas de réussite</li>
 * 		<li>#USE_FAILED, en cas de d'échec</li>
 * 		<li>#USE_INVALID_TARGET, si la cible n'existe pas</li>
 * 		<li>#USE_NOT_ENOUGH_TP, si votre poireau n'a pas assez de TP</li>
 * 		<li>#USE_INVALID_COOLDOWN, si la puce n'est pas encore utilisable</li>
 * 		<li>#USE_INVALID_POSITION, si la portée est mauvaise ou la ligne de vue n'est pas dégagée</li>
 * 	</ul>
 */
function useChip(chip, leek) {
}

/**
 * Utilise le chip <b>chip</b> sur la cellule <b>cell</b>
 * @param chip Chip à utiliser
 * @param cell Cellule cible
 * @return Une valeur supérieure à 0 si l'attaque a été lancée
 */
function useChipOnCell(chip, cell) {
}

/**
 * Utilise l'arme sélectionnée sur le poireau <b>leek</b>
 * @param leek Poireau ciblé
 * @return Les valeurs de retour de useWeapon sont :
 * 
 * 	<ul>
 * 		<li>#USE_SUCCESS, en cas de réussite</li>
 * 		<li>#USE_FAILED, en cas de d'échec</li>
 * 		<li>#USE_INVALID_TARGET, si la cible n'existe pas</li>
 * 		<li>#USE_NOT_ENOUGH_TP, si votre poireau n'a pas assez de TP</li>
 * 		<li>#USE_INVALID_POSITION, si la portée est mauvaise ou la ligne de vue n'est pas dégagée</li>
 * 	</ul>
 */
function useWeapon(leek) {
}

/**
 * Utilise l'arme sélectionnée sur la cellule <b>cell</b>.
 * @param cell Cellule ciblée.
 * @return Une valeur supérieure à 0 si l'attaque a été lancée.
 */
function useWeaponOnCell(cell) {
}

global CELL_EMPTY = 0;

global CELL_OBSTACLE = 2;

global CELL_PLAYER = 1;

global E = 2.71828182846;

global EFFECT_ABSOLUTE_SHIELD = 5;

global EFFECT_AGILITY = 4;

global EFFECT_DAMAGE = 1;

global EFFECT_DEBUFF = 9;

global EFFECT_FORCE = 3;

global EFFECT_HEAL = 2;

global EFFECT_MP = 7;

global EFFECT_RELATIVE_SHIELD = 6;

global EFFECT_TP = 8;

global FIGHT_CONTEXT_CHALLENGE = 2;

global FIGHT_CONTEXT_GARDEN = 1;

global FIGHT_CONTEXT_TEST = 0;

global FIGHT_CONTEXT_TOURNAMENT = 3;

global FIGHT_TYPE_FARMER = 1;

global FIGHT_TYPE_SOLO = 0;

global FIGHT_TYPE_TEAM = 2;

global INSTRUCTIONS_LIMIT = 10000;

global MAX_TURNS = 64;

global MESSAGE_ATTACK = 2;

global MESSAGE_BUFF_AGILITY = 8;

global MESSAGE_BUFF_FORCE = 7;

global MESSAGE_BUFF_MP = 5;

global MESSAGE_BUFF_TP = 6;

global MESSAGE_CUSTOM = 13;

global MESSAGE_DEBUFF = 3;

global MESSAGE_HEAL = 1;

global MESSAGE_MOVE_AWAY = 10;

global MESSAGE_MOVE_AWAY_CELL = 12;

global MESSAGE_MOVE_TOWARD = 9;

global MESSAGE_MOVE_TOWARD_CELL = 11;

global MESSAGE_SHIELD = 4;

global PI = 3.14159265359;

global SORT_ASC = 0;

global SORT_DESC = 1;

global USE_FAILED = 0;

global USE_INVALID_COOLDOWN = -3;

global USE_INVALID_POSITION = -4;

global USE_INVALID_TARGET = -1;

global USE_NOT_ENOUGH_TP = -2;

global USE_SUCCESS = 1;

